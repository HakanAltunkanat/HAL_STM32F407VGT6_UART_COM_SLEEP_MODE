
STM32F407VGT6_SLEEP_MODE_VOL2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af4  08002af4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002afc  08002afc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          000000b0  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9ca  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e2  00000000  00000000  0002ca1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b68  00000000  00000000  0002ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002014a  00000000  00000000  0002fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d01d  00000000  00000000  0004fbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e95  00000000  00000000  0005cbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123a64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003298  00000000  00000000  00123ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ac4 	.word	0x08002ac4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08002ac4 	.word	0x08002ac4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <TIM1_UP_TIM10_IRQHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char tx_buffer[]="Sleep Mode Test\n";
int sleep_request=0;
void TIM1_UP_TIM10_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004d2:	481c      	ldr	r0, [pc, #112]	; (8000544 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80004d4:	f001 fb3c 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  __HAL_RCC_GPIOA_CLK_ENABLE(); //usart2 and gpıoa clocks are disabled att the beginning to maintain low power
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a19      	ldr	r2, [pc, #100]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_USART2_CLK_ENABLE(); //thay are enabled at the beginning of transmission
 80004f4:	2300      	movs	r3, #0
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80004fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fc:	4a12      	ldr	r2, [pc, #72]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80004fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000502:	6413      	str	r3, [r2, #64]	; 0x40
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sizeof(tx_buffer), 200);
 8000510:	23c8      	movs	r3, #200	; 0xc8
 8000512:	2211      	movs	r2, #17
 8000514:	490d      	ldr	r1, [pc, #52]	; (800054c <TIM1_UP_TIM10_IRQHandler+0x80>)
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <TIM1_UP_TIM10_IRQHandler+0x84>)
 8000518:	f001 ff33 	bl	8002382 <HAL_UART_Transmit>
  __HAL_RCC_USART2_CLK_DISABLE(); //the clocks are turned off after transmission is done
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8000522:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	6313      	str	r3, [r2, #48]	; 0x30
  sleep_request=1;
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <TIM1_UP_TIM10_IRQHandler+0x88>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]




  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	2000003c 	.word	0x2000003c
 8000548:	40023800 	.word	0x40023800
 800054c:	20000000 	.word	0x20000000
 8000550:	20000084 	.word	0x20000084
 8000554:	200000c8 	.word	0x200000c8

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fa44 	bl	80009e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f824 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f910 	bl	8000788 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000568:	f000 f88a 	bl	8000680 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800056c:	f000 f8da 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SuspendTick(); //stops systick for any unwanted cpu wake up
 8000570:	f000 faac 	bl	8000acc <HAL_SuspendTick>
  HAL_TIM_Base_Start_IT(&htim1);
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <main+0x48>)
 8000576:	f001 fa7b 	bl	8001a70 <HAL_TIM_Base_Start_IT>
  RCC->APB2LPENR|=(1<<0);
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <main+0x4c>)
 800057c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800057e:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <main+0x4c>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6653      	str	r3, [r2, #100]	; 0x64
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sleep_request)
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x50>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0fb      	beq.n	8000586 <main+0x2e>
	  {
		  sleep_request=0;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
		  //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
		  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000594:	2101      	movs	r1, #1
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fd56 	bl	8001048 <HAL_PWR_EnterSTOPMode>
	  if(sleep_request)
 800059c:	e7f3      	b.n	8000586 <main+0x2e>
 800059e:	bf00      	nop
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	40023800 	.word	0x40023800
 80005a8:	200000c8 	.word	0x200000c8

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fa7a 	bl	8002ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a27      	ldr	r2, [pc, #156]	; (8000678 <SystemClock_Config+0xcc>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xd0>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fd35 	bl	80010a0 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f8d0 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000648:	2390      	movs	r3, #144	; 0x90
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f000 ff96 	bl	8001590 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066a:	f000 f8b9 	bl	80007e0 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1; //tim1 is configured to create an interrupt per second
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_TIM1_Init+0x9c>)
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <MX_TIM1_Init+0xa0>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_TIM1_Init+0x9c>)
 80006a4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80006a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM1_Init+0x9c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM1_Init+0x9c>)
 80006b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM1_Init+0x9c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_TIM1_Init+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_TIM1_Init+0x9c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_TIM1_Init+0x9c>)
 80006cc:	f001 f980 	bl	80019d0 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f883 	bl	80007e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_TIM1_Init+0x9c>)
 80006e8:	f001 fb3a 	bl	8001d60 <HAL_TIM_ConfigClockSource>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006f2:	f000 f875 	bl	80007e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_TIM1_Init+0x9c>)
 8000704:	f001 fd60 	bl	80021c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 f867 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000003c 	.word	0x2000003c
 8000720:	40010000 	.word	0x40010000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART2_UART_Init+0x58>)
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <MX_USART2_UART_Init+0x5c>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART2_UART_Init+0x58>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x58>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4808      	ldr	r0, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x58>)
 800075c:	f001 fdc4 	bl	80022e8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f83b 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_RCC_USART2_CLK_DISABLE(); //usart2 clcok is enabled in the HAL_UART_Init(&huart2) function. so the usart2 clock is  disabled at the beginning
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x60>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x60>)
 8000770:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
  /* USER CODE END USART2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	40004400 	.word	0x40004400
 8000784:	40023800 	.word	0x40023800

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_GPIO_Init+0x50>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <MX_GPIO_Init+0x50>)
 80007a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_GPIO_Init+0x50>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007b8:	f649 73f2 	movw	r3, #40946	; 0x9ff2
 80007bc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x54>)
 80007cc:	f000 faa0 	bl	8000d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_TIM_Base_MspInit+0x48>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d115      	bne.n	800087a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_TIM_Base_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <HAL_TIM_Base_MspInit+0x4c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6453      	str	r3, [r2, #68]	; 0x44
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_TIM_Base_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	2019      	movs	r0, #25
 8000870:	f000 fa17 	bl	8000ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000874:	2019      	movs	r0, #25
 8000876:	f000 fa30 	bl	8000cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010000 	.word	0x40010000
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a19      	ldr	r2, [pc, #100]	; (8000910 <HAL_UART_MspInit+0x84>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d12b      	bne.n	8000906 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e6:	230c      	movs	r3, #12
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0x8c>)
 8000902:	f000 fa05 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40004400 	.word	0x40004400
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f890 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099a:	490e      	ldr	r1, [pc, #56]	; (80009d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b0:	4c0b      	ldr	r4, [pc, #44]	; (80009e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009be:	f7ff ffd7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f002 f853 	bl	8002a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fdc7 	bl	8000558 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80009d8:	08002b04 	.word	0x08002b04
  ldr r2, =_sbss
 80009dc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80009e0:	200000d0 	.word	0x200000d0

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f93b 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fee6 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f953 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 f91b 	bl	8000ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000014 	.word	0x20000014
 8000a84:	2000001c 	.word	0x2000001c
 8000a88:	20000018 	.word	0x20000018

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	2000001c 	.word	0x2000001c
 8000ab0:	200000cc 	.word	0x200000cc

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200000cc 	.word	0x200000cc

08000acc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_SuspendTick+0x1c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_SuspendTick+0x1c>)
 8000ad6:	f023 0302 	bic.w	r3, r3, #2
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	; (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c58:	d301      	bcc.n	8000c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00f      	b.n	8000c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SysTick_Config+0x40>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c66:	210f      	movs	r1, #15
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f7ff ff8e 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x40>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff29 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb4:	f7ff ff3e 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	6978      	ldr	r0, [r7, #20]
 8000cc0:	f7ff ff8e 	bl	8000be0 <NVIC_EncodePriority>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	bf00      	nop
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff31 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ffa2 	bl	8000c48 <SysTick_Config>
 8000d04:	4603      	mov	r3, r0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e16b      	b.n	8001004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 815a 	bne.w	8000ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d005      	beq.n	8000d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d130      	bne.n	8000dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 0201 	and.w	r2, r3, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d017      	beq.n	8000e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d123      	bne.n	8000e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	08da      	lsrs	r2, r3, #3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3208      	adds	r2, #8
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f003 0307 	and.w	r3, r3, #7
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	69b9      	ldr	r1, [r7, #24]
 8000e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0203 	and.w	r2, r3, #3
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80b4 	beq.w	8000ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b60      	ldr	r3, [pc, #384]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a5f      	ldr	r2, [pc, #380]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	; (800101c <HAL_GPIO_Init+0x30c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a5b      	ldr	r2, [pc, #364]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_GPIO_Init+0x314>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x226>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a51      	ldr	r2, [pc, #324]	; (8001028 <HAL_GPIO_Init+0x318>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x222>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a50      	ldr	r2, [pc, #320]	; (800102c <HAL_GPIO_Init+0x31c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x21e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_GPIO_Init+0x320>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x21a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4e      	ldr	r2, [pc, #312]	; (8001034 <HAL_GPIO_Init+0x324>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x216>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4d      	ldr	r2, [pc, #308]	; (8001038 <HAL_GPIO_Init+0x328>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x212>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4c      	ldr	r2, [pc, #304]	; (800103c <HAL_GPIO_Init+0x32c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <HAL_GPIO_Init+0x330>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x20a>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e00e      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f1a:	2308      	movs	r3, #8
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f1e:	2306      	movs	r3, #6
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x228>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4935      	ldr	r1, [pc, #212]	; (8001020 <HAL_GPIO_Init+0x310>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_GPIO_Init+0x334>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f ae90 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40021400 	.word	0x40021400
 800103c:	40021800 	.word	0x40021800
 8001040:	40021c00 	.word	0x40021c00
 8001044:	40013c00 	.word	0x40013c00

08001048 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_PWR_EnterSTOPMode+0x50>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 0203 	bic.w	r2, r3, #3
 800105c:	490e      	ldr	r1, [pc, #56]	; (8001098 <HAL_PWR_EnterSTOPMode+0x50>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_PWR_EnterSTOPMode+0x54>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_PWR_EnterSTOPMode+0x54>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001076:	bf30      	wfi
 8001078:	e002      	b.n	8001080 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800107a:	bf40      	sev
    __WFE();
 800107c:	bf20      	wfe
    __WFE();
 800107e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_PWR_EnterSTOPMode+0x54>)
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_PWR_EnterSTOPMode+0x54>)
 8001086:	f023 0304 	bic.w	r3, r3, #4
 800108a:	6113      	str	r3, [r2, #16]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40007000 	.word	0x40007000
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e267      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d075      	beq.n	80011aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d00c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	4b85      	ldr	r3, [pc, #532]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d112      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d6:	4b82      	ldr	r3, [pc, #520]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010e2:	d10b      	bne.n	80010fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	4b7e      	ldr	r3, [pc, #504]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d05b      	beq.n	80011a8 <HAL_RCC_OscConfig+0x108>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d157      	bne.n	80011a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e242      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d106      	bne.n	8001114 <HAL_RCC_OscConfig+0x74>
 8001106:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a75      	ldr	r2, [pc, #468]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e01d      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6f      	ldr	r2, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a6c      	ldr	r2, [pc, #432]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e00b      	b.n	8001150 <HAL_RCC_OscConfig+0xb0>
 8001138:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a68      	ldr	r2, [pc, #416]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b66      	ldr	r3, [pc, #408]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a65      	ldr	r2, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fcac 	bl	8000ab4 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fca8 	bl	8000ab4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e207      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4b5b      	ldr	r3, [pc, #364]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0xc0>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fc98 	bl	8000ab4 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fc94 	bl	8000ab4 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1f3      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0xe8>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d063      	beq.n	800127e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011b6:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00b      	beq.n	80011da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d11c      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d001      	beq.n	80011f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e1c7      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f2:	4b3b      	ldr	r3, [pc, #236]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	e03a      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <HAL_RCC_OscConfig+0x244>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001216:	f7ff fc4d 	bl	8000ab4 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fc49 	bl	8000ab4 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1a8      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4925      	ldr	r1, [pc, #148]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	4b24      	ldr	r3, [pc, #144]	; (80012e4 <HAL_RCC_OscConfig+0x244>)
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fc2c 	bl	8000ab4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc28 	bl	8000ab4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e187      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d036      	beq.n	80012f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d016      	beq.n	80012c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_RCC_OscConfig+0x248>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fc0c 	bl	8000ab4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc08 	bl	8000ab4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e167      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x200>
 80012be:	e01b      	b.n	80012f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_OscConfig+0x248>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fbf5 	bl	8000ab4 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	e00e      	b.n	80012ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fbf1 	bl	8000ab4 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d907      	bls.n	80012ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e150      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
 80012e0:	40023800 	.word	0x40023800
 80012e4:	42470000 	.word	0x42470000
 80012e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ea      	bne.n	80012ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8097 	beq.w	8001434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b81      	ldr	r3, [pc, #516]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a7c      	ldr	r2, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b7a      	ldr	r3, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001342:	4b74      	ldr	r3, [pc, #464]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a73      	ldr	r2, [pc, #460]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134e:	f7ff fbb1 	bl	8000ab4 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001356:	f7ff fbad 	bl	8000ab4 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e10c      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x474>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d106      	bne.n	800138a <HAL_RCC_OscConfig+0x2ea>
 800137c:	4b64      	ldr	r3, [pc, #400]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a63      	ldr	r2, [pc, #396]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x324>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d10c      	bne.n	80013ac <HAL_RCC_OscConfig+0x30c>
 8001392:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a5e      	ldr	r2, [pc, #376]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
 800139e:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x324>
 80013ac:	4b58      	ldr	r3, [pc, #352]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a57      	ldr	r2, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
 80013b8:	4b55      	ldr	r3, [pc, #340]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 0304 	bic.w	r3, r3, #4
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d015      	beq.n	80013f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb72 	bl	8000ab4 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f7ff fb6e 	bl	8000ab4 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0cb      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0ee      	beq.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb5c 	bl	8000ab4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fb58 	bl	8000ab4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	; 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0b5      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001416:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ee      	bne.n	8001400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 800142e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a1 	beq.w	8001580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d05c      	beq.n	8001504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d141      	bne.n	80014d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x478>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fb2c 	bl	8000ab4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb28 	bl	8000ab4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e087      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	3b01      	subs	r3, #1
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	061b      	lsls	r3, r3, #24
 80014a2:	491b      	ldr	r1, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_RCC_OscConfig+0x478>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb01 	bl	8000ab4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fafd 	bl	8000ab4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e05c      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x416>
 80014d4:	e054      	b.n	8001580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_RCC_OscConfig+0x478>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff faea 	bl	8000ab4 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fae6 	bl	8000ab4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e045      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_RCC_OscConfig+0x470>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
 8001502:	e03d      	b.n	8001580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d107      	bne.n	800151c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e038      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	40007000 	.word	0x40007000
 8001518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x4ec>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d028      	beq.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d121      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d11a      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001554:	4293      	cmp	r3, r2
 8001556:	d111      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	3b01      	subs	r3, #1
 8001566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d107      	bne.n	800157c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0cc      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a4:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d90c      	bls.n	80015cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0b8      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a58      	ldr	r2, [pc, #352]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	494d      	ldr	r1, [pc, #308]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d044      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d119      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e07f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d003      	beq.n	800164e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	2b03      	cmp	r3, #3
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e067      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4934      	ldr	r1, [pc, #208]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001680:	f7ff fa18 	bl	8000ab4 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	e00a      	b.n	800169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001688:	f7ff fa14 	bl	8000ab4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e04f      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 020c 	and.w	r2, r3, #12
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d1eb      	bne.n	8001688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d20c      	bcs.n	80016d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e032      	b.n	800173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4916      	ldr	r1, [pc, #88]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001716:	f000 f821 	bl	800175c <HAL_RCC_GetSysClockFreq>
 800171a:	4602      	mov	r2, r0
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	091b      	lsrs	r3, r3, #4
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	490a      	ldr	r1, [pc, #40]	; (8001750 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	5ccb      	ldrb	r3, [r1, r3]
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f978 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023c00 	.word	0x40023c00
 800174c:	40023800 	.word	0x40023800
 8001750:	08002adc 	.word	0x08002adc
 8001754:	20000014 	.word	0x20000014
 8001758:	20000018 	.word	0x20000018

0800175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800175c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001760:	b094      	sub	sp, #80	; 0x50
 8001762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
 8001768:	2300      	movs	r3, #0
 800176a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800176c:	2300      	movs	r3, #0
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001774:	4b79      	ldr	r3, [pc, #484]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d00d      	beq.n	800179c <HAL_RCC_GetSysClockFreq+0x40>
 8001780:	2b08      	cmp	r3, #8
 8001782:	f200 80e1 	bhi.w	8001948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <HAL_RCC_GetSysClockFreq+0x34>
 800178a:	2b04      	cmp	r3, #4
 800178c:	d003      	beq.n	8001796 <HAL_RCC_GetSysClockFreq+0x3a>
 800178e:	e0db      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b73      	ldr	r3, [pc, #460]	; (8001960 <HAL_RCC_GetSysClockFreq+0x204>)
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001794:	e0db      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001796:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_GetSysClockFreq+0x208>)
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800179a:	e0d8      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800179c:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d063      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b2:	4b6a      	ldr	r3, [pc, #424]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	099b      	lsrs	r3, r3, #6
 80017b8:	2200      	movs	r2, #0
 80017ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80017bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017ce:	4622      	mov	r2, r4
 80017d0:	462b      	mov	r3, r5
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f04f 0100 	mov.w	r1, #0
 80017da:	0159      	lsls	r1, r3, #5
 80017dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e0:	0150      	lsls	r0, r2, #5
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4621      	mov	r1, r4
 80017e8:	1a51      	subs	r1, r2, r1
 80017ea:	6139      	str	r1, [r7, #16]
 80017ec:	4629      	mov	r1, r5
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001800:	4659      	mov	r1, fp
 8001802:	018b      	lsls	r3, r1, #6
 8001804:	4651      	mov	r1, sl
 8001806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180a:	4651      	mov	r1, sl
 800180c:	018a      	lsls	r2, r1, #6
 800180e:	4651      	mov	r1, sl
 8001810:	ebb2 0801 	subs.w	r8, r2, r1
 8001814:	4659      	mov	r1, fp
 8001816:	eb63 0901 	sbc.w	r9, r3, r1
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800182e:	4690      	mov	r8, r2
 8001830:	4699      	mov	r9, r3
 8001832:	4623      	mov	r3, r4
 8001834:	eb18 0303 	adds.w	r3, r8, r3
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	462b      	mov	r3, r5
 800183c:	eb49 0303 	adc.w	r3, r9, r3
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800184e:	4629      	mov	r1, r5
 8001850:	024b      	lsls	r3, r1, #9
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001858:	4621      	mov	r1, r4
 800185a:	024a      	lsls	r2, r1, #9
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001862:	2200      	movs	r2, #0
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
 8001866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800186c:	f7fe fcac 	bl	80001c8 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001878:	e058      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	2200      	movs	r2, #0
 8001882:	4618      	mov	r0, r3
 8001884:	4611      	mov	r1, r2
 8001886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001894:	4642      	mov	r2, r8
 8001896:	464b      	mov	r3, r9
 8001898:	f04f 0000 	mov.w	r0, #0
 800189c:	f04f 0100 	mov.w	r1, #0
 80018a0:	0159      	lsls	r1, r3, #5
 80018a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a6:	0150      	lsls	r0, r2, #5
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4641      	mov	r1, r8
 80018ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b2:	4649      	mov	r1, r9
 80018b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018cc:	ebb2 040a 	subs.w	r4, r2, sl
 80018d0:	eb63 050b 	sbc.w	r5, r3, fp
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	00eb      	lsls	r3, r5, #3
 80018de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e2:	00e2      	lsls	r2, r4, #3
 80018e4:	4614      	mov	r4, r2
 80018e6:	461d      	mov	r5, r3
 80018e8:	4643      	mov	r3, r8
 80018ea:	18e3      	adds	r3, r4, r3
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	464b      	mov	r3, r9
 80018f0:	eb45 0303 	adc.w	r3, r5, r3
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001902:	4629      	mov	r1, r5
 8001904:	028b      	lsls	r3, r1, #10
 8001906:	4621      	mov	r1, r4
 8001908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800190c:	4621      	mov	r1, r4
 800190e:	028a      	lsls	r2, r1, #10
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001916:	2200      	movs	r2, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	61fa      	str	r2, [r7, #28]
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	f7fe fc52 	bl	80001c8 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	3301      	adds	r3, #1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800193c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800193e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001946:	e002      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetSysClockFreq+0x204>)
 800194a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001950:	4618      	mov	r0, r3
 8001952:	3750      	adds	r7, #80	; 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_RCC_GetHCLKFreq+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000014 	.word	0x20000014

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff0 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08002aec 	.word	0x08002aec

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019ac:	f7ff ffdc 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0b5b      	lsrs	r3, r3, #13
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	08002aec 	.word	0x08002aec

080019d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e041      	b.n	8001a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe ff20 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f000 faa0 	bl	8001f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d001      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e04e      	b.n	8001b26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab2:	d01d      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0x80>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d111      	bne.n	8001b14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d010      	beq.n	8001b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b12:	e007      	b.n	8001b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40010000 	.word	0x40010000
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40000c00 	.word	0x40000c00
 8001b44:	40010400 	.word	0x40010400
 8001b48:	40014000 	.word	0x40014000
 8001b4c:	40001800 	.word	0x40001800

08001b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d122      	bne.n	8001bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d11b      	bne.n	8001bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0202 	mvn.w	r2, #2
 8001b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f9bf 	bl	8001f16 <HAL_TIM_IC_CaptureCallback>
 8001b98:	e005      	b.n	8001ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f9b1 	bl	8001f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f9c2 	bl	8001f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d122      	bne.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d11b      	bne.n	8001c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 0204 	mvn.w	r2, #4
 8001bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f995 	bl	8001f16 <HAL_TIM_IC_CaptureCallback>
 8001bec:	e005      	b.n	8001bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f987 	bl	8001f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f998 	bl	8001f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d122      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d11b      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0208 	mvn.w	r2, #8
 8001c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f96b 	bl	8001f16 <HAL_TIM_IC_CaptureCallback>
 8001c40:	e005      	b.n	8001c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f95d 	bl	8001f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f96e 	bl	8001f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d122      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0210 	mvn.w	r2, #16
 8001c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f941 	bl	8001f16 <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f933 	bl	8001f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f944 	bl	8001f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10e      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0201 	mvn.w	r2, #1
 8001ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f90d 	bl	8001eee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b80      	cmp	r3, #128	; 0x80
 8001ce0:	d10e      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d107      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 faea 	bl	80022d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d10e      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d107      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f909 	bl	8001f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d10e      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d107      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0220 	mvn.w	r2, #32
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fab4 	bl	80022c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_TIM_ConfigClockSource+0x1c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e0b4      	b.n	8001ee6 <HAL_TIM_ConfigClockSource+0x186>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db4:	d03e      	beq.n	8001e34 <HAL_TIM_ConfigClockSource+0xd4>
 8001db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dba:	f200 8087 	bhi.w	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc2:	f000 8086 	beq.w	8001ed2 <HAL_TIM_ConfigClockSource+0x172>
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dca:	d87f      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dcc:	2b70      	cmp	r3, #112	; 0x70
 8001dce:	d01a      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0xa6>
 8001dd0:	2b70      	cmp	r3, #112	; 0x70
 8001dd2:	d87b      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dd4:	2b60      	cmp	r3, #96	; 0x60
 8001dd6:	d050      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0x11a>
 8001dd8:	2b60      	cmp	r3, #96	; 0x60
 8001dda:	d877      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001ddc:	2b50      	cmp	r3, #80	; 0x50
 8001dde:	d03c      	beq.n	8001e5a <HAL_TIM_ConfigClockSource+0xfa>
 8001de0:	2b50      	cmp	r3, #80	; 0x50
 8001de2:	d873      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d058      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x13a>
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d86f      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dec:	2b30      	cmp	r3, #48	; 0x30
 8001dee:	d064      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001df0:	2b30      	cmp	r3, #48	; 0x30
 8001df2:	d86b      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d060      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d867      	bhi.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d05c      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d05a      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x15a>
 8001e04:	e062      	b.n	8001ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f000 f9b7 	bl	8002188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	609a      	str	r2, [r3, #8]
      break;
 8001e32:	e04f      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6899      	ldr	r1, [r3, #8]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f000 f9a0 	bl	8002188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e56:	609a      	str	r2, [r3, #8]
      break;
 8001e58:	e03c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6859      	ldr	r1, [r3, #4]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f000 f914 	bl	8002094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2150      	movs	r1, #80	; 0x50
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f96d 	bl	8002152 <TIM_ITRx_SetConfig>
      break;
 8001e78:	e02c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	461a      	mov	r2, r3
 8001e88:	f000 f933 	bl	80020f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2160      	movs	r1, #96	; 0x60
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f95d 	bl	8002152 <TIM_ITRx_SetConfig>
      break;
 8001e98:	e01c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f000 f8f4 	bl	8002094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2140      	movs	r1, #64	; 0x40
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f94d 	bl	8002152 <TIM_ITRx_SetConfig>
      break;
 8001eb8:	e00c      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 f944 	bl	8002152 <TIM_ITRx_SetConfig>
      break;
 8001eca:	e003      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed0:	e000      	b.n	8001ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d00f      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	; (800206c <TIM_Base_SetConfig+0x118>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00b      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <TIM_Base_SetConfig+0x11c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <TIM_Base_SetConfig+0x120>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d108      	bne.n	8001fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb4:	d027      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <TIM_Base_SetConfig+0x118>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d023      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <TIM_Base_SetConfig+0x11c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <TIM_Base_SetConfig+0x120>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d017      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <TIM_Base_SetConfig+0x128>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <TIM_Base_SetConfig+0x12c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <TIM_Base_SetConfig+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <TIM_Base_SetConfig+0x134>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <TIM_Base_SetConfig+0x138>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <TIM_Base_SetConfig+0x13c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0xf8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d103      	bne.n	8002054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40010400 	.word	0x40010400
 800207c:	40014000 	.word	0x40014000
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800
 8002088:	40001800 	.word	0x40001800
 800208c:	40001c00 	.word	0x40001c00
 8002090:	40002000 	.word	0x40002000

08002094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f023 0201 	bic.w	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f023 030a 	bic.w	r3, r3, #10
 80020d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	621a      	str	r2, [r3, #32]
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f023 0210 	bic.w	r2, r3, #16
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800211c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	031b      	lsls	r3, r3, #12
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800212e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	621a      	str	r2, [r3, #32]
}
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	f043 0307 	orr.w	r3, r3, #7
 8002174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	609a      	str	r2, [r3, #8]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	021a      	lsls	r2, r3, #8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021dc:	2302      	movs	r3, #2
 80021de:	e05a      	b.n	8002296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d01d      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a15      	ldr	r2, [pc, #84]	; (80022bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10c      	bne.n	8002284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4313      	orrs	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40000800 	.word	0x40000800
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40010400 	.word	0x40010400
 80022b8:	40014000 	.word	0x40014000
 80022bc:	40001800 	.word	0x40001800

080022c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e03f      	b.n	800237a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe fabc 	bl	800088c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800232a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f929 	bl	8002584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b08a      	sub	sp, #40	; 0x28
 8002386:	af02      	add	r7, sp, #8
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d17c      	bne.n	800249c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_UART_Transmit+0x2c>
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e075      	b.n	800249e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_UART_Transmit+0x3e>
 80023bc:	2302      	movs	r3, #2
 80023be:	e06e      	b.n	800249e <HAL_UART_Transmit+0x11c>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2221      	movs	r2, #33	; 0x21
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d6:	f7fe fb6d 	bl	8000ab4 <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	88fa      	ldrh	r2, [r7, #6]
 80023e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f0:	d108      	bne.n	8002404 <HAL_UART_Transmit+0x82>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e003      	b.n	800240c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002414:	e02a      	b.n	800246c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f840 	bl	80024a6 <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e036      	b.n	800249e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10b      	bne.n	800244e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	3302      	adds	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	e007      	b.n	800245e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	3301      	adds	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1cf      	bne.n	8002416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2200      	movs	r2, #0
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f810 	bl	80024a6 <UART_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	e000      	b.n	800249e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800249c:	2302      	movs	r3, #2
  }
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b090      	sub	sp, #64	; 0x40
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b6:	e050      	b.n	800255a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024be:	d04c      	beq.n	800255a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80024c6:	f7fe faf5 	bl	8000ab4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d241      	bcs.n	800255a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024f6:	637a      	str	r2, [r7, #52]	; 0x34
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e5      	bne.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3314      	adds	r3, #20
 8002510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	613b      	str	r3, [r7, #16]
   return(result);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800252a:	623a      	str	r2, [r7, #32]
 800252c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	69f9      	ldr	r1, [r7, #28]
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	61bb      	str	r3, [r7, #24]
   return(result);
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e00f      	b.n	800257a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	429a      	cmp	r2, r3
 8002576:	d09f      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3740      	adds	r7, #64	; 0x40
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002588:	b0c0      	sub	sp, #256	; 0x100
 800258a:	af00      	add	r7, sp, #0
 800258c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	ea40 0301 	orr.w	r3, r0, r1
 80025ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025dc:	f021 010c 	bic.w	r1, r1, #12
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ea:	430b      	orrs	r3, r1
 80025ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	6999      	ldr	r1, [r3, #24]
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	ea40 0301 	orr.w	r3, r0, r1
 800260a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b8f      	ldr	r3, [pc, #572]	; (8002850 <UART_SetConfig+0x2cc>)
 8002614:	429a      	cmp	r2, r3
 8002616:	d005      	beq.n	8002624 <UART_SetConfig+0xa0>
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <UART_SetConfig+0x2d0>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d104      	bne.n	800262e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002624:	f7ff f9c0 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8002628:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800262c:	e003      	b.n	8002636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800262e:	f7ff f9a7 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8002632:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002640:	f040 810c 	bne.w	800285c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002648:	2200      	movs	r2, #0
 800264a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800264e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002656:	4622      	mov	r2, r4
 8002658:	462b      	mov	r3, r5
 800265a:	1891      	adds	r1, r2, r2
 800265c:	65b9      	str	r1, [r7, #88]	; 0x58
 800265e:	415b      	adcs	r3, r3
 8002660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002666:	4621      	mov	r1, r4
 8002668:	eb12 0801 	adds.w	r8, r2, r1
 800266c:	4629      	mov	r1, r5
 800266e:	eb43 0901 	adc.w	r9, r3, r1
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800267e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002686:	4690      	mov	r8, r2
 8002688:	4699      	mov	r9, r3
 800268a:	4623      	mov	r3, r4
 800268c:	eb18 0303 	adds.w	r3, r8, r3
 8002690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002694:	462b      	mov	r3, r5
 8002696:	eb49 0303 	adc.w	r3, r9, r3
 800269a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026b2:	460b      	mov	r3, r1
 80026b4:	18db      	adds	r3, r3, r3
 80026b6:	653b      	str	r3, [r7, #80]	; 0x50
 80026b8:	4613      	mov	r3, r2
 80026ba:	eb42 0303 	adc.w	r3, r2, r3
 80026be:	657b      	str	r3, [r7, #84]	; 0x54
 80026c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026c8:	f7fd fd7e 	bl	80001c8 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4b61      	ldr	r3, [pc, #388]	; (8002858 <UART_SetConfig+0x2d4>)
 80026d2:	fba3 2302 	umull	r2, r3, r3, r2
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	011c      	lsls	r4, r3, #4
 80026da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026ec:	4642      	mov	r2, r8
 80026ee:	464b      	mov	r3, r9
 80026f0:	1891      	adds	r1, r2, r2
 80026f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80026f4:	415b      	adcs	r3, r3
 80026f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026fc:	4641      	mov	r1, r8
 80026fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002702:	4649      	mov	r1, r9
 8002704:	eb43 0b01 	adc.w	fp, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800271c:	4692      	mov	sl, r2
 800271e:	469b      	mov	fp, r3
 8002720:	4643      	mov	r3, r8
 8002722:	eb1a 0303 	adds.w	r3, sl, r3
 8002726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800272a:	464b      	mov	r3, r9
 800272c:	eb4b 0303 	adc.w	r3, fp, r3
 8002730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002740:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002748:	460b      	mov	r3, r1
 800274a:	18db      	adds	r3, r3, r3
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
 800274e:	4613      	mov	r3, r2
 8002750:	eb42 0303 	adc.w	r3, r2, r3
 8002754:	647b      	str	r3, [r7, #68]	; 0x44
 8002756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800275a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800275e:	f7fd fd33 	bl	80001c8 <__aeabi_uldivmod>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4611      	mov	r1, r2
 8002768:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <UART_SetConfig+0x2d4>)
 800276a:	fba3 2301 	umull	r2, r3, r3, r1
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2264      	movs	r2, #100	; 0x64
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	1acb      	subs	r3, r1, r3
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <UART_SetConfig+0x2d4>)
 8002780:	fba3 2302 	umull	r2, r3, r3, r2
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800278c:	441c      	add	r4, r3
 800278e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002798:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800279c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027a0:	4642      	mov	r2, r8
 80027a2:	464b      	mov	r3, r9
 80027a4:	1891      	adds	r1, r2, r2
 80027a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027a8:	415b      	adcs	r3, r3
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027b0:	4641      	mov	r1, r8
 80027b2:	1851      	adds	r1, r2, r1
 80027b4:	6339      	str	r1, [r7, #48]	; 0x30
 80027b6:	4649      	mov	r1, r9
 80027b8:	414b      	adcs	r3, r1
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027c8:	4659      	mov	r1, fp
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	4651      	mov	r1, sl
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	4651      	mov	r1, sl
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	4642      	mov	r2, r8
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027e4:	464b      	mov	r3, r9
 80027e6:	460a      	mov	r2, r1
 80027e8:	eb42 0303 	adc.w	r3, r2, r3
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002804:	460b      	mov	r3, r1
 8002806:	18db      	adds	r3, r3, r3
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
 800280a:	4613      	mov	r3, r2
 800280c:	eb42 0303 	adc.w	r3, r2, r3
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800281a:	f7fd fcd5 	bl	80001c8 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <UART_SetConfig+0x2d4>)
 8002824:	fba3 1302 	umull	r1, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2164      	movs	r1, #100	; 0x64
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	3332      	adds	r3, #50	; 0x32
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <UART_SetConfig+0x2d4>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 0207 	and.w	r2, r3, #7
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4422      	add	r2, r4
 800284a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800284c:	e105      	b.n	8002a5a <UART_SetConfig+0x4d6>
 800284e:	bf00      	nop
 8002850:	40011000 	.word	0x40011000
 8002854:	40011400 	.word	0x40011400
 8002858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800285c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002866:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800286a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800286e:	4642      	mov	r2, r8
 8002870:	464b      	mov	r3, r9
 8002872:	1891      	adds	r1, r2, r2
 8002874:	6239      	str	r1, [r7, #32]
 8002876:	415b      	adcs	r3, r3
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800287e:	4641      	mov	r1, r8
 8002880:	1854      	adds	r4, r2, r1
 8002882:	4649      	mov	r1, r9
 8002884:	eb43 0501 	adc.w	r5, r3, r1
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	00eb      	lsls	r3, r5, #3
 8002892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	4643      	mov	r3, r8
 800289e:	18e3      	adds	r3, r4, r3
 80028a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028a4:	464b      	mov	r3, r9
 80028a6:	eb45 0303 	adc.w	r3, r5, r3
 80028aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028ca:	4629      	mov	r1, r5
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	4621      	mov	r1, r4
 80028d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d4:	4621      	mov	r1, r4
 80028d6:	008a      	lsls	r2, r1, #2
 80028d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028dc:	f7fd fc74 	bl	80001c8 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <UART_SetConfig+0x4e4>)
 80028e6:	fba3 2302 	umull	r2, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	011c      	lsls	r4, r3, #4
 80028ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002900:	4642      	mov	r2, r8
 8002902:	464b      	mov	r3, r9
 8002904:	1891      	adds	r1, r2, r2
 8002906:	61b9      	str	r1, [r7, #24]
 8002908:	415b      	adcs	r3, r3
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002910:	4641      	mov	r1, r8
 8002912:	1851      	adds	r1, r2, r1
 8002914:	6139      	str	r1, [r7, #16]
 8002916:	4649      	mov	r1, r9
 8002918:	414b      	adcs	r3, r1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002928:	4659      	mov	r1, fp
 800292a:	00cb      	lsls	r3, r1, #3
 800292c:	4651      	mov	r1, sl
 800292e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002932:	4651      	mov	r1, sl
 8002934:	00ca      	lsls	r2, r1, #3
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	4603      	mov	r3, r0
 800293c:	4642      	mov	r2, r8
 800293e:	189b      	adds	r3, r3, r2
 8002940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002944:	464b      	mov	r3, r9
 8002946:	460a      	mov	r2, r1
 8002948:	eb42 0303 	adc.w	r3, r2, r3
 800294c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	67bb      	str	r3, [r7, #120]	; 0x78
 800295a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002968:	4649      	mov	r1, r9
 800296a:	008b      	lsls	r3, r1, #2
 800296c:	4641      	mov	r1, r8
 800296e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002972:	4641      	mov	r1, r8
 8002974:	008a      	lsls	r2, r1, #2
 8002976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800297a:	f7fd fc25 	bl	80001c8 <__aeabi_uldivmod>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <UART_SetConfig+0x4e4>)
 8002984:	fba3 1302 	umull	r1, r3, r3, r2
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	2164      	movs	r1, #100	; 0x64
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	3332      	adds	r3, #50	; 0x32
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <UART_SetConfig+0x4e4>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a2:	441c      	add	r4, r3
 80029a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a8:	2200      	movs	r2, #0
 80029aa:	673b      	str	r3, [r7, #112]	; 0x70
 80029ac:	677a      	str	r2, [r7, #116]	; 0x74
 80029ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029b2:	4642      	mov	r2, r8
 80029b4:	464b      	mov	r3, r9
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	415b      	adcs	r3, r3
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c2:	4641      	mov	r1, r8
 80029c4:	1851      	adds	r1, r2, r1
 80029c6:	6039      	str	r1, [r7, #0]
 80029c8:	4649      	mov	r1, r9
 80029ca:	414b      	adcs	r3, r1
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029da:	4659      	mov	r1, fp
 80029dc:	00cb      	lsls	r3, r1, #3
 80029de:	4651      	mov	r1, sl
 80029e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029e4:	4651      	mov	r1, sl
 80029e6:	00ca      	lsls	r2, r1, #3
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	4603      	mov	r3, r0
 80029ee:	4642      	mov	r2, r8
 80029f0:	189b      	adds	r3, r3, r2
 80029f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029f4:	464b      	mov	r3, r9
 80029f6:	460a      	mov	r2, r1
 80029f8:	eb42 0303 	adc.w	r3, r2, r3
 80029fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	663b      	str	r3, [r7, #96]	; 0x60
 8002a08:	667a      	str	r2, [r7, #100]	; 0x64
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a16:	4649      	mov	r1, r9
 8002a18:	008b      	lsls	r3, r1, #2
 8002a1a:	4641      	mov	r1, r8
 8002a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a20:	4641      	mov	r1, r8
 8002a22:	008a      	lsls	r2, r1, #2
 8002a24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a28:	f7fd fbce 	bl	80001c8 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <UART_SetConfig+0x4e4>)
 8002a32:	fba3 1302 	umull	r1, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2164      	movs	r1, #100	; 0x64
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	3332      	adds	r3, #50	; 0x32
 8002a44:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <UART_SetConfig+0x4e4>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4422      	add	r2, r4
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	bf00      	nop
 8002a5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a60:	46bd      	mov	sp, r7
 8002a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a66:	bf00      	nop
 8002a68:	51eb851f 	.word	0x51eb851f

08002a6c <__libc_init_array>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	4d0d      	ldr	r5, [pc, #52]	; (8002aa4 <__libc_init_array+0x38>)
 8002a70:	4c0d      	ldr	r4, [pc, #52]	; (8002aa8 <__libc_init_array+0x3c>)
 8002a72:	1b64      	subs	r4, r4, r5
 8002a74:	10a4      	asrs	r4, r4, #2
 8002a76:	2600      	movs	r6, #0
 8002a78:	42a6      	cmp	r6, r4
 8002a7a:	d109      	bne.n	8002a90 <__libc_init_array+0x24>
 8002a7c:	4d0b      	ldr	r5, [pc, #44]	; (8002aac <__libc_init_array+0x40>)
 8002a7e:	4c0c      	ldr	r4, [pc, #48]	; (8002ab0 <__libc_init_array+0x44>)
 8002a80:	f000 f820 	bl	8002ac4 <_init>
 8002a84:	1b64      	subs	r4, r4, r5
 8002a86:	10a4      	asrs	r4, r4, #2
 8002a88:	2600      	movs	r6, #0
 8002a8a:	42a6      	cmp	r6, r4
 8002a8c:	d105      	bne.n	8002a9a <__libc_init_array+0x2e>
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
 8002a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a94:	4798      	blx	r3
 8002a96:	3601      	adds	r6, #1
 8002a98:	e7ee      	b.n	8002a78 <__libc_init_array+0xc>
 8002a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9e:	4798      	blx	r3
 8002aa0:	3601      	adds	r6, #1
 8002aa2:	e7f2      	b.n	8002a8a <__libc_init_array+0x1e>
 8002aa4:	08002afc 	.word	0x08002afc
 8002aa8:	08002afc 	.word	0x08002afc
 8002aac:	08002afc 	.word	0x08002afc
 8002ab0:	08002b00 	.word	0x08002b00

08002ab4 <memset>:
 8002ab4:	4402      	add	r2, r0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d100      	bne.n	8002abe <memset+0xa>
 8002abc:	4770      	bx	lr
 8002abe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ac2:	e7f9      	b.n	8002ab8 <memset+0x4>

08002ac4 <_init>:
 8002ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac6:	bf00      	nop
 8002ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aca:	bc08      	pop	{r3}
 8002acc:	469e      	mov	lr, r3
 8002ace:	4770      	bx	lr

08002ad0 <_fini>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr
